{"version":3,"sources":["Card.js","Cardlist.js","Search.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","style","backgroundColor","Cardlist","robots","cardComponent","map","user","i","key","Search","searchChange","onChange","type","placeholder","Scroll","props","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kLAsBeA,G,WAlBF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAGtB,OAEC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACrB,yBAAKM,MAAO,CAACC,gBAAiB,SAC5B,4BAAKN,GACL,2BAAIC,OCeMM,EAxBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEbC,EAAgBD,EAAOE,KAAI,SAACC,EAAOC,GACxC,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLb,GAAIS,EAAOI,GAAGb,GACdC,KAAMQ,EAAOI,GAAGZ,KAChBC,MAAOO,EAAOI,GAAGX,WAMpB,OAEE,6BACEQ,I,4BCAUK,EAlBD,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAEf,OAEC,yBAAKb,UAAU,OACd,2BAAOc,SAAUD,EAAcE,KAAK,SAASC,YAAY,iBAAiBhB,UAAU,0CACpF,6BACA,+BCMYiB,G,MAbD,SAACC,GAEd,OAEE,yBAAKf,MAAQ,CAACgB,UAAW,SAAUC,OAAS,kBAAmBC,OAAQ,UACrEH,EAAMI,YCoDIC,E,kDAhDb,aAAc,IAAD,8BAEX,gBAQFC,eAAgB,SAACC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SARzC,EAAKC,MAAO,CACVxB,OAAS,GACTqB,YAAc,IALL,E,gEAgBO,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GACvD,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACA,EAAKT,SAAS,CAACpB,OAAS6B,S,+BAGtB,IAAD,OACAC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAC,GAC/C,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAIlE,OAAgC,IAA7BH,KAAKP,MAAMxB,OAAOoC,OACZ,wBAAI1C,UAAU,MAAd,cAKD,yBAAKA,UAAU,MACf,2CACA,kBAAC,EAAD,CAAQa,aAAcwB,KAAKb,iBAC3B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GA1CdO,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a86d2bbe.chunk.js","sourcesContent":["import React from 'react'\r\nimport 'tachyons'\r\n\r\n\r\nconst Card = ({id,name,email}) =>{\r\n\r\n\r\n\treturn(\r\n\r\n\t\t<div className = \"tc bg-light-blue dib br3 pa14 ma3 bw2 shadow-4 grow\">\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div style={{backgroundColor :\"pink\"}}>\r\n\t\t\t \t<h2>{name}</h2>\r\n\t\t\t \t<p>{email}</p>\r\n\t\t\t </div>\r\n\t\t</div>\r\n\r\n\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst Cardlist = ({ robots }) => {\r\n\r\n\tconst cardComponent = robots.map((user , i)=>{\r\n\t\treturn( \r\n\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t);\r\n\t})\r\n\r\n\treturn (\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{cardComponent\t}\r\n\t\t\t</div>\r\n\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\nimport 'tachyons'\r\n\r\nconst Search =({searchChange})=>{\r\n\r\n\treturn(\r\n\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input onChange={searchChange} type=\"search\" placeholder=\"Search a robot\" className=\"w-40 pa3 ba b--green bg-lightest-blue\"/>\r\n\t\t\t<br/>\r\n\t\t\t<br/>\r\n\t\t</div>\r\n\r\n\r\n\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\nexport default Search; ","import React from 'react'\r\n\r\n\r\nconst Scroll =(props)=>{\r\n\r\n\treturn(\r\n\r\n\t\t\t<div style ={{overflowY: 'scroll', border : '5px solid black', height: '700px' }}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\nimport Cardlist from './Cardlist'\nimport robots from './robots'\nimport Search from './Search'\nimport './App.css'\nimport 'tachyons'\nimport Scroll from './Scroll'\n\n\n \nclass App extends React.Component {\n\n  constructor(){\n\n    super();\n    this.state ={\n      robots : [],\n      searchField : ''\n    }\n  }\n\n\n  onSearchChange =(event)=>{\n    this.setState({searchField: event.target.value})\n  }\n\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n      return response.json();\n    })\n    .then(users =>{\n          this.setState({robots : users})\n        })\n  }\n  render() {\n     const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n      }\n      );\n\n    if(this.state.robots.length === 0){\n      return <h1 className=\"tc\">Loading...</h1>\n    }\n\n    else{\n      return (\n            <div className=\"tc\">\n            <h1>RoboFriends</h1>\n            <Search searchChange={this.onSearchChange}/>\n            <Scroll>\n              <Cardlist robots={filteredRobots}/>\n            </Scroll>\n            </div>\n           );\n    }\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport Cardlist from './Cardlist'\nimport robots from './robots'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}